[
  {
    "title": "Two Sum",
    "description": "<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p><p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p><p>You can return the answer in any order. Ensure your output is a JSON array of two numbers, sorted in ascending order (e.g., <code>[0,1]</code>).</p><p><strong>Constraints:</strong></p><ul><li>2 ≤ nums.length ≤ 10⁵</li><li>-10⁹ ≤ nums[i] ≤ 10⁹</li><li>-10⁹ ≤ target ≤ 10⁹</li></ul>",
    "difficulty": "Easy",
    "defaultLanguage": "javascript",
    "tags": ["Array", "Hash Table"],
    "testCases": [
      { "input": "[2,7,11,15]\\n9", "expectedOutput": "[0,1]", "isSample": true },
      { "input": "[3,2,4]\\n6", "expectedOutput": "[1,2]", "isSample": true },
      { "input": "[3,3]\\n6", "expectedOutput": "[0,1]", "isSample": false },
      { "input": "[0,4,3,0]\\n0", "expectedOutput": "[0,3]", "isSample": false },
      { "input": "[1,5,3,2]\\n7", "expectedOutput": "[1,3]", "isSample": false },
      { "input": "[-1,-2,-3,-4,-5]\\n-8", "expectedOutput": "[2,4]", "isSample": false },
      { "input": "[100,200,300,400]\\n500", "expectedOutput": "[0,3]", "isSample": false },
      { "input": "[1,1,1,1]\\n2", "expectedOutput": "[0,1]", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 131072
  },
  {
    "title": "Prefix Sum",
    "description": "<p>Given an array of integers, compute the prefix sum array where <code>prefix[i]</code> = sum of elements <code>nums[0..i]</code>.</p><p><strong>Constraints:</strong></p><ul><li>1 ≤ nums.length ≤ 10⁶</li><li>-10⁹ ≤ nums[i] ≤ 10⁹</li></ul>",
    "difficulty": "Easy",
    "defaultLanguage": "java",
    "tags": ["Array", "Prefix Sum"],
    "testCases": [
      { "input": "[1,2,3,4,5]", "expectedOutput": "[1,3,6,10,15]", "isSample": true },
      { "input": "[0,0,0,0]", "expectedOutput": "[0,0,0,0]", "isSample": true },
      { "input": "[-1,1,-1,1]", "expectedOutput": "[-1,0,-1,0]", "isSample": false },
      { "input": "[5]", "expectedOutput": "[5]", "isSample": false },
      { "input": "[10,20,30]", "expectedOutput": "[10,30,60]", "isSample": false },
      { "input": "[100,-50,50]", "expectedOutput": "[100,50,100]", "isSample": false },
      { "input": "[1,1,1,1,1]", "expectedOutput": "[1,2,3,4,5]", "isSample": false },
      { "input": "[-5,-5,-5]", "expectedOutput": "[-5,-10,-15]", "isSample": false }
    ],
    "cpuTimeLimit": 2,
    "memoryLimit": 262144
  },
  {
    "title": "Reverse String",
    "description": "<p>Write a function that reverses a string in place. The input is given as an array of characters <code>s</code>.</p><p><strong>Constraints:</strong></p><ul><li>1 ≤ s.length ≤ 10⁵</li></ul>",
    "difficulty": "Easy",
    "defaultLanguage": "python",
    "tags": ["String", "Two Pointers"],
    "testCases": [
      { "input": "[\"h\",\"e\",\"l\",\"l\",\"o\"]", "expectedOutput": "[\"o\",\"l\",\"l\",\"e\",\"h\"]", "isSample": true },
      { "input": "[\"A\"]", "expectedOutput": "[\"A\"]", "isSample": true },
      { "input": "[\"a\",\"b\"]", "expectedOutput": "[\"b\",\"a\"]", "isSample": false },
      { "input": "[\"1\",\"2\",\"3\"]", "expectedOutput": "[\"3\",\"2\",\"1\"]", "isSample": false },
      { "input": "[\"X\",\"Y\",\"Z\"]", "expectedOutput": "[\"Z\",\"Y\",\"X\"]", "isSample": false },
      { "input": "[\" \",\" \"]", "expectedOutput": "[\" \",\" \"]", "isSample": false },
      { "input": "[\"m\",\"a\",\"d\",\"a\",\"m\"]", "expectedOutput": "[\"m\",\"a\",\"d\",\"a\",\"m\"]", "isSample": false },
      { "input": "[\"1\",\"0\",\"0\",\"1\"]", "expectedOutput": "[\"1\",\"0\",\"0\",\"1\"]", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 65536
  },
  {
    "title": "Palindrome Check",
    "description": "<p>Determine if a string <code>s</code> is a palindrome, considering only alphanumeric characters and ignoring cases.</p><p><strong>Constraints:</strong></p><ul><li>0 ≤ s.length ≤ 10⁵</li></ul>",
    "difficulty": "Easy",
    "defaultLanguage": "javascript",
    "tags": ["String", "Two Pointers"],
    "testCases": [
      { "input": "A man, a plan, a canal: Panama", "expectedOutput": "true", "isSample": true },
      { "input": "race a car", "expectedOutput": "false", "isSample": true },
      { "input": "", "expectedOutput": "true", "isSample": false },
      { "input": "aa", "expectedOutput": "true", "isSample": false },
      { "input": "aba", "expectedOutput": "true", "isSample": false },
      { "input": "abcba", "expectedOutput": "true", "isSample": false },
      { "input": "abccba", "expectedOutput": "true", "isSample": false },
      { "input": "No lemon, no melon", "expectedOutput": "true", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 131072
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "description": "<p>Given a string <code>s</code>, find length of the longest substring without repeating characters.</p><p><strong>Constraints:</strong></p><ul><li>0 ≤ s.length ≤ 10⁵</li></ul>",
    "difficulty": "Medium",
    "defaultLanguage": "javascript",
    "tags": ["String", "Sliding Window", "Hash Table"],
    "testCases": [
      { "input": "abcabcbb", "expectedOutput": "3", "isSample": true },
      { "input": "bbbbb", "expectedOutput": "1", "isSample": true },
      { "input": "pwwkew", "expectedOutput": "3", "isSample": false },
      { "input": "", "expectedOutput": "0", "isSample": false },
      { "input": " ", "expectedOutput": "1", "isSample": false },
      { "input": "au", "expectedOutput": "2", "isSample": false },
      { "input": "dvdf", "expectedOutput": "3", "isSample": false },
      { "input": "tmmzuxt", "expectedOutput": "5", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 131072
  },
  {
    "title": "Valid Parentheses",
    "description": "<p>Given a string <code>s</code> containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.</p><p><strong>Constraints:</strong></p><ul><li>1 ≤ s.length ≤ 10⁴</li></ul>",
    "difficulty": "Easy",
    "defaultLanguage": "python",
    "tags": ["Stack", "String"],
    "testCases": [
      { "input": "()", "expectedOutput": "True", "isSample": true },
      { "input": "()[]{}", "expectedOutput": "True", "isSample": true },
      { "input": "(]", "expectedOutput": "False", "isSample": false },
      { "input": "([)]", "expectedOutput": "False", "isSample": false },
      { "input": "{[]}", "expectedOutput": "True", "isSample": false },
      { "input": "", "expectedOutput": "True", "isSample": false },
      { "input": "(((((", "expectedOutput": "False", "isSample": false },
      { "input": "))))", "expectedOutput": "False", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 65536
  },
  {
    "title": "Merge Two Sorted Lists",
    "description": "<p>Merge two sorted linked lists and return it as a sorted list.</p><p><strong>Constraints:</strong></p><ul><li>0 ≤ list1.length, list2.length ≤ 10⁴</li><li>-10⁹ ≤ Node.val ≤ 10⁹</li></ul>",
    "difficulty": "Easy",
    "defaultLanguage": "java",
    "tags": ["Linked List", "Recursion"],
    "testCases": [
      { "input": "[1,2,4]\\n[1,3,4]", "expectedOutput": "[1,1,2,3,4,4]", "isSample": true },
      { "input": "[]\\n[]", "expectedOutput": "[]", "isSample": true },
      { "input": "[0]\\n[]", "expectedOutput": "[0]", "isSample": false },
      { "input": "[]\\n[0]", "expectedOutput": "[0]", "isSample": false },
      { "input": "[2,5,7]\\n[1,3,4]", "expectedOutput": "[1,2,3,4,5,7]", "isSample": false },
      { "input": "[1,1]\\n[1,1]", "expectedOutput": "[1,1,1,1]", "isSample": false },
      { "input": "[-1,0]\\n[1,2]", "expectedOutput": "[-1,0,1,2]", "isSample": false },
      { "input": "[5]\\n[3,4,6]", "expectedOutput": "[3,4,5,6]", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 131072
  },
  {
    "title": "Climbing Stairs",
    "description": "<p>Each time you can climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p><strong>Constraints:</strong></p><ul><li>1 ≤ n ≤ 45</li></ul>",
    "difficulty": "Easy",
    "defaultLanguage": "cpp",
    "tags": ["Dynamic Programming"],
    "testCases": [
      { "input": "1", "expectedOutput": "1", "isSample": true },
      { "input": "2", "expectedOutput": "2", "isSample": true },
      { "input": "3", "expectedOutput": "3", "isSample": false },
      { "input": "4", "expectedOutput": "5", "isSample": false },
      { "input": "5", "expectedOutput": "8", "isSample": false },
      { "input": "6", "expectedOutput": "13", "isSample": false },
      { "input": "7", "expectedOutput": "21", "isSample": false },
      { "input": "8", "expectedOutput": "34", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 65536
  },
  {
    "title": "Maximum Subarray",
    "description": "<p>Find the contiguous subarray with the largest sum and return its sum.</p><p><strong>Constraints:</strong></p><ul><li>1 ≤ nums.length ≤ 10⁵</li><li>-10⁴ ≤ nums[i] ≤ 10⁴</li></ul>",
    "difficulty": "Medium",
    "defaultLanguage": "cpp",
    "tags": ["Array", "Dynamic Programming"],
    "testCases": [
      { "input": "1 -2 1", "expectedOutput": "1", "isSample": true },
      { "input": "5 4 -1 7 8", "expectedOutput": "23", "isSample": true },
      { "input": "-1 -2 -3", "expectedOutput": "-1", "isSample": false },
      { "input": "2 -1 2 3 -5 4", "expectedOutput": "6", "isSample": false },
      { "input": "1 2 3 4 5", "expectedOutput": "15", "isSample": false },
      { "input": "-2 1 -3 4 -1 2 1 -5 4", "expectedOutput": "6", "isSample": false },
      { "input": "0 0 0", "expectedOutput": "0", "isSample": false },
      { "input": "-5 4 3 -2 1", "expectedOutput": "7", "isSample": false }
    ],
    "cpuTimeLimit": 2,
    "memoryLimit": 262144
  },
  {
    "title": "Search in Rotated Sorted Array",
    "description": "<p>Search target in a rotated sorted array and return its index, or -1 if not found.</p><p><strong>Constraints:</strong></p><ul><li>1 ≤ nums.length ≤ 10⁴</li><li>-10⁴ ≤ nums[i], target ≤ 10⁴</li><li>All values of nums are unique.</li></ul>",
    "difficulty": "Medium",
    "defaultLanguage": "java",
    "tags": ["Binary Search", "Array"],
    "testCases": [
      { "input": "[4,5,6,7,0,1,2]\\n0", "expectedOutput": "4", "isSample": true },
      { "input": "[4,5,6,7,0,1,2]\\n3", "expectedOutput": "-1", "isSample": true },      
      { "input": "[1]\\n0", "expectedOutput": "-1", "isSample": false },
      { "input": "[1]\\n1", "expectedOutput": "0", "isSample": false },
      { "input": "[3,1]\\n1", "expectedOutput": "1", "isSample": false },
      { "input": "[5,1,3]\\n5", "expectedOutput": "0", "isSample": false },
      { "input": "[5,1,3]\\n3", "expectedOutput": "2", "isSample": false },
      { "input": "[2,3,4,5,1]\\n1", "expectedOutput": "4", "isSample": false }
    ],
    "cpuTimeLimit": 2,
    "memoryLimit": 262144
  }
]
