[
  {
    "title": "Two Sum",
    "description": "<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p><p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p><p>You can return the answer in any order. Ensure your output is a JSON array of two numbers, sorted in ascending order (e.g., <code>[0,1]</code>).</p>",
    "difficulty": "Easy",
    "defaultLanguage": "javascript",
    "starterCode": "// Input format: \n// Line 1: JSON array of numbers (e.g., [2,7,11,15])\n// Line 2: Target integer (e.g., 9)\n// Output format: JSON array of two indices (e.g., [0,1])\n\nfunction twoSum(nums, target) {\n    const numMap = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (numMap.has(complement)) {\n            return [numMap.get(complement), i].sort((a,b) => a - b);\n        }\n        numMap.set(nums[i], i);\n    }\n    return []; // Should not be reached\n}\n\n// --- Boilerplate for reading input and printing output ---\nconst readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\nlet inputLines = [];\nrl.on('line', (line) => inputLines.push(line));\nrl.on('close', () => {\n    if (inputLines.length < 2) {\n        return;\n    }\n    try {\n        const nums = JSON.parse(inputLines[0]);\n        const target = parseInt(inputLines[1]);\n        const result = twoSum(nums, target);\n        console.log(JSON.stringify(result));\n    } catch (e) {}\n});",
    "testCases": [
      { "input": "[2,7,11,15]\n9", "expectedOutput": "[0,1]", "isSample": true },
      { "input": "[3,2,4]\n6", "expectedOutput": "[1,2]", "isSample": false },
      { "input": "[3,3]\n6", "expectedOutput": "[0,1]", "isSample": false },
      { "input": "[0,4,3,0]\n0", "expectedOutput": "[0,3]", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 131072
  },
  {
    "title": "Prefix Sum",
    "description": "<p>Given an array of integers, compute the prefix sum array of the same length, where <code>prefix[i]</code> is the sum of all elements up to index <code>i</code> (inclusive).</p><p>Input is a single line JSON array. Output should be a single line JSON array of prefix sums.</p><p>Your Java class name must be <code>Main</code>.</p>",
    "difficulty": "Easy",
    "defaultLanguage": "java",
    "starterCode": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main { // Class name MUST be Main\n    public static List<Long> calculatePrefixSum(List<Integer> arr) {\n        List<Long> prefixSums = new ArrayList<>();\n        if (arr == null) { \n            return prefixSums;\n        }\n        if (arr.isEmpty()) {\n             return prefixSums;\n        }\n        prefixSums.add((long)arr.get(0));\n        for (int i = 1; i < arr.size(); i++) {\n            prefixSums.add(prefixSums.get(i - 1) + arr.get(i));\n        }\n        return prefixSums;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = \"\";\n        if (sc.hasNextLine()) { \n             line = sc.nextLine();\n        }\n        sc.close();\n\n        line = line.trim();\n        List<Integer> arr = new ArrayList<>();\n        if (line.startsWith(\"[\") && line.endsWith(\"]\") && line.length() >= 2) {\n            String content = line.substring(1, line.length() - 1).trim();\n            if (!content.isEmpty()) {\n                String[] numbersStr = content.split(\",\");\n                for (String numStr : numbersStr) {\n                    String trimmedNumStr = numStr.trim();\n                    if (!trimmedNumStr.isEmpty()) {\n                        try {\n                            arr.add(Integer.parseInt(trimmedNumStr));\n                        } catch (NumberFormatException e) {}\n                    }\n                }\n            }\n        }\n\n        List<Long> result = calculatePrefixSum(arr);\n\n        System.out.print(\"[\");\n        for (int i = 0; i < result.size(); i++) {\n            System.out.print(result.get(i));\n            if (i < result.size() - 1) {\n                System.out.print(\",\");\n            }\n        }\n        System.out.println(\"]\");\n    }\n}\n",
    "testCases": [
      { "input": "[1,2,3,4]", "expectedOutput": "[1,3,6,10]", "isSample": true },
      { "input": "[10]", "expectedOutput": "[10]", "isSample": false },
      { "input": "[-1,-2,-3]", "expectedOutput": "[-1,-3,-6]", "isSample": false },
      { "input": "[]", "expectedOutput": "[]", "isSample": false }
    ],
    "cpuTimeLimit": 2,
    "memoryLimit": 262144
  },
  {
    "title": "Reverse String",
    "description": "<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p><p>You <strong>must</strong> do this by modifying the input array <strong>in-place</strong> with O(1) extra memory.</p><p>Input is a single line JSON array of characters. Output should be the modified array as a single line JSON array.</p>",
    "difficulty": "Easy",
    "defaultLanguage": "python",
    "starterCode": "import json\nimport sys\n\ndef reverseString(s: list[str]) -> None:\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1\n\nif __name__ == '__main__':\n    try:\n        line = sys.stdin.readline()\n        if not line:\n            print(\"[]\")\n        else:\n            s_array = json.loads(line)\n            if not isinstance(s_array, list):\n                print(\"[]\")\n            else:\n                reverseString(s_array)\n                print(json.dumps(s_array, separators=(',', ':'))) # <--- MODIFIED HERE\n    except json.JSONDecodeError:\n        print(\"[]\")\n    except Exception as e:\n        print(\"[]\")\n",
    "testCases": [
      { "input": "[\"h\",\"e\",\"l\",\"l\",\"o\"]", "expectedOutput": "[\"o\",\"l\",\"l\",\"e\",\"h\"]", "isSample": true },
      { "input": "[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]", "expectedOutput": "[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]", "isSample": false },
      { "input": "[\"a\"]", "expectedOutput": "[\"a\"]", "isSample": false },
      { "input": "[]", "expectedOutput": "[]", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 65536 
  }
]