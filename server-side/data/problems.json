[
  {
    "title": "Two Sum",
    "description": "<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p><p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p><p>You can return the answer in any order. Ensure your output is a JSON array of two numbers, sorted in ascending order (e.g., <code>[0,1]</code>).</p>",
    "difficulty": "Easy",
    "defaultLanguage": "javascript",
    "starterCode": {
        "javascript": "// Input: Two lines - 1st: JSON array of numbers, 2nd: target integer\n// Output: JSON array of two indices\nfunction twoSum(nums, target) {\n    // Your logic here\n    console.error(\"Implement Two Sum in JavaScript\");\n    return [];\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\nlet inputLines = [];\nrl.on('line', (line) => inputLines.push(line));\nrl.on('close', () => {\n    if (inputLines.length < 2) return;\n    try {\n        const nums = JSON.parse(inputLines[0]);\n        const target = parseInt(inputLines[1]);\n        const result = twoSum(nums, target);\n        console.log(JSON.stringify(result));\n    } catch (e) { console.log(\"[]\"); }\n});",
        "cpp": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <map>\n\n// Input: Two lines - 1st: JSON array string, 2nd: target integer string\n// Output: JSON array string of two indices\nstd::vector<int> twoSum(const std::vector<int>& nums, int target) {\n    // Your logic here\n    // std::cerr << \"Implement Two Sum in C++\" << std::endl;\n    return {};\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);\n    std::string nums_line, target_line;\n    std::getline(std::cin, nums_line);\n    std::getline(std::cin, target_line);\n    std::vector<int> nums_vec; \n    // TODO: Parse nums_line into nums_vec (e.g., \"[1,2,3]\")\n    int target_val = 0;\n    try { target_val = std::stoi(target_line); } catch (const std::exception& e) {}\n    std::vector<int> result = twoSum(nums_vec, target_val);\n    // TODO: Format result vector into JSON string (e.g., \"[0,1]\")\n    std::cout << \"[]\" << std::endl; \n    return 0;\n}",
        "java": "import java.util.*;\n\npublic class Main {\n    public int[] twoSum(int[] nums, int target) {\n        // Your logic here\n        // System.err.println(\"Implement Two Sum in Java\");\n        return new int[]{};\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String numsLine = sc.nextLine();\n        int target = Integer.parseInt(sc.nextLine());\n        sc.close();\n        // TODO: Parse numsLine (JSON array string) into int[] numsArray\n        // Main solver = new Main();\n        // int[] result = solver.twoSum(numsArray, target);\n        // System.out.println(Arrays.toString(result).replace(\" \", \"\")); \n        System.out.println(\"[]\");\n    }\n}",
        "python": "import json\nimport sys\n\ndef two_sum(nums: list[int], target: int) -> list[int]:\n    # Your logic here\n    # print(\"Implement Two Sum in Python\", file=sys.stderr)\n    return []\n\nif __name__ == '__main__':\n    try:\n        nums_line = sys.stdin.readline()\n        target_line = sys.stdin.readline()\n        nums = json.loads(nums_line.strip())\n        target = int(target_line.strip())\n        result = two_sum(nums, target)\n        print(json.dumps(result, separators=(',',':')))\n    except:\n        print(\"[]\")\n"
    },
    "tags": ["Array", "Hash Table"],
    "testCases": [
      { "input": "[2,7,11,15]\n9", "expectedOutput": "[0,1]", "isSample": true },
      { "input": "[3,2,4]\n6", "expectedOutput": "[1,2]", "isSample": false },
      { "input": "[3,3]\n6", "expectedOutput": "[0,1]", "isSample": false },
      { "input": "[0,4,3,0]\n0", "expectedOutput": "[0,3]", "isSample": false },
      { "input": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n39", "expectedOutput": "[18,19]", "isSample": false },
      { "input": "[-10,-20,5,15,25,50]\n-5", "expectedOutput": "[2,4]", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 131072
  },
  {
    "title": "Prefix Sum",
    "description": "<p>Given an array of integers, compute the prefix sum array of the same length, where <code>prefix[i]</code> is the sum of all elements up to index <code>i</code> (inclusive).</p><p>Input is a single line JSON array. Output should be a single line JSON array of prefix sums.</p><p>Your Java class name must be <code>Main</code>.</p>",
    "difficulty": "Easy",
    "defaultLanguage": "java",
    "starterCode": {
        "java": "import java.util.Scanner;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static List<Long> calculatePrefixSum(List<Integer> arr) {\n        List<Long> prefixSums = new ArrayList<>();\n        if (arr == null || arr.isEmpty()) {\n            return prefixSums;\n        }\n        // Your core logic to calculate prefix sums here\n        // Example: \n        // prefixSums.add((long)arr.get(0));\n        // for (int i = 1; i < arr.size(); i++) {\n        //     prefixSums.add(prefixSums.get(i - 1) + arr.get(i));\n        // }\n        // System.err.println(\"Implement Prefix Sum logic in Java\");\n        return prefixSums;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = \"\";\n        if (sc.hasNextLine()) { line = sc.nextLine(); }\n        sc.close();\n        List<Integer> arr = new ArrayList<>();\n        if (line.startsWith(\"[\") && line.endsWith(\"]\") && line.length() >= 2) {\n            String content = line.substring(1, line.length() - 1).trim();\n            if (!content.isEmpty()) {\n                String[] numbersStr = content.split(\",\");\n                for (String numStr : numbersStr) {\n                    String trimmedNumStr = numStr.trim();\n                    if (!trimmedNumStr.isEmpty()) {\n                        try { arr.add(Integer.parseInt(trimmedNumStr)); }\n                        catch (NumberFormatException e) { /* Ignore malformed numbers */ }\n                    }\n                }\n            }\n        }\n        List<Long> result = calculatePrefixSum(arr);\n        System.out.print(\"[\");\n        for (int i = 0; i < result.size(); i++) {\n            System.out.print(result.get(i));\n            if (i < result.size() - 1) System.out.print(\",\");\n        }\n        System.out.println(\"]\");\n    }\n}",
        "cpp": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nstd::vector<long long> calculatePrefixSum(const std::vector<int>& arr) {\n    // Your logic here\n    // std::cerr << \"Implement Prefix Sum in C++\" << std::endl;\n    return {};\n}\n\n// Helper to parse JSON array string (basic)\nstd::vector<int> parseInput(const std::string& line) { /* ... implementation ... */ return {}; }\n// Helper to format output JSON array string (basic)\nstd::string formatOutput(const std::vector<long long>& nums) { /* ... implementation ... */ return \"[]\"; }\n\nint main() {\n    std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);\n    std::string line;\n    std::getline(std::cin, line);\n    std::vector<int> arr = parseInput(line);\n    std::vector<long long> result = calculatePrefixSum(arr);\n    std::cout << formatOutput(result) << std::endl;\n    return 0;\n}",
        "python": "import json\nimport sys\n\ndef calculate_prefix_sum(arr: list[int]) -> list[int]:\n    # Your logic here\n    # print(\"Implement Prefix Sum in Python\", file=sys.stderr)\n    return []\n\nif __name__ == '__main__':\n    try:\n        line = sys.stdin.readline()\n        arr = json.loads(line.strip())\n        result = calculate_prefix_sum(arr)\n        print(json.dumps(result, separators=(',',':')))\n    except:\n        print(\"[]\")\n",
        "javascript": "function calculatePrefixSum(arr) {\n    // Your logic here\n    console.error(\"Implement Prefix Sum in JavaScript\");\n    return [];\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\nrl.once('line', (line) => {\n    try {\n        const arr = JSON.parse(line);\n        const result = calculatePrefixSum(arr);\n        console.log(JSON.stringify(result));\n    } catch (e) { console.log(\"[]\"); }\n    rl.close();\n});"
    },
    "tags": ["Array", "Prefix Sum"],
    "testCases": [
      { "input": "[1]", "expectedOutput": "[1]", "isSample": true },
      { "input": "[1,2,3,4,5]", "expectedOutput": "[1,3,6,10,15]", "isSample": true },
      { "input": "[10,20]", "expectedOutput": "[10,30]", "isSample": false },
      { "input": "[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]", "expectedOutput": "[-1,-3,-6,-10,-15,-21,-28,-36,-45,-55]", "isSample": false },
      { "input": "[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]", "expectedOutput": "[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]", "isSample": false },
      { "input": "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", "expectedOutput": "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", "isSample": false },
      { "input": "[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]", "expectedOutput": "[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200]", "isSample": false }
    ],
    "cpuTimeLimit": 2,
    "memoryLimit": 262144
  },
  {
    "title": "Reverse String",
    "description": "<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>...</p>",
    "difficulty": "Easy",
    "defaultLanguage": "python",
    "starterCode": {
        "python": "import json\nimport sys\n\ndef reverseString(s: list[str]) -> None:\n    # Your logic here to modify s in-place\n    # print(\"Implement Reverse String in Python\", file=sys.stderr)\n    pass\n\nif __name__ == '__main__':\n    try:\n        line = sys.stdin.readline()\n        s_array = json.loads(line.strip())\n        reverseString(s_array)\n        print(json.dumps(s_array, separators=(',',':')))\n    except:\n        print(\"[]\")\n",
        "cpp": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nvoid reverseString(std::vector<char>& s) {\n    // Your logic here to modify s in-place\n    // std::cerr << \"Implement Reverse String in C++\" << std::endl;\n}\n\n// You would need robust JSON parsing for char arrays for C++\nstd::vector<char> parseInput(const std::string& line) { return {}; }\nstd::string formatOutput(const std::vector<char>& s) { return \"[]\"; }\n\nint main() {\n    std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);\n    std::string line;\n    std::getline(std::cin, line);\n    std::vector<char> s_array = parseInput(line);\n    reverseString(s_array);\n    std::cout << formatOutput(s_array) << std::endl;\n    return 0;\n}",
        "java": "import java.util.*;\n\npublic class Main {\n    public void reverseString(char[] s) {\n        // Your logic here to modify s in-place\n        // System.err.println(\"Implement Reverse String in Java\");\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = \"\";\n        if (sc.hasNextLine()) { line = sc.nextLine(); }\n        sc.close();\n        // TODO: Parse line (JSON array of chars) into char[] s_array\n        char[] s_array = new char[]{}; // Placeholder\n        new Main().reverseString(s_array);\n        // TODO: Print s_array as JSON array string\n        System.out.println(\"[]\"); // Placeholder\n    }\n}",
        "javascript": "function reverseString(s) {\n    // Your logic here to modify s in-place\n    console.error(\"Implement Reverse String in JavaScript\");\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\nrl.once('line', (line) => {\n    try {\n        const s_array = JSON.parse(line);\n        reverseString(s_array);\n        console.log(JSON.stringify(s_array));\n    } catch (e) { console.log(\"[]\"); }\n    rl.close();\n});"
    },
    "tags": ["String", "Two Pointers"],
    "testCases": [
      { "input": "[\"a\"]", "expectedOutput": "[\"a\"]", "isSample": true },
      { "input": "[\"h\",\"e\",\"l\",\"l\",\"o\"]", "expectedOutput": "[\"o\",\"l\",\"l\",\"e\",\"h\"]", "isSample": true },
      { "input": "[\"S\",\"o\",\"r\",\"t\",\"M\",\"e\"]", "expectedOutput": "[\"e\",\"M\",\"t\",\"r\",\"o\",\"S\"]", "isSample": false },
      { "input": "[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]", "expectedOutput": "[\"0\",\"9\",\"8\",\"7\",\"6\",\"5\",\"4\",\"3\",\"2\",\"1\"]", "isSample": false },
      { "input": "[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\"]", "expectedOutput": "[\"t\",\"s\",\"r\",\"q\",\"p\",\"o\",\"n\",\"m\",\"l\",\"k\",\"j\",\"i\",\"h\",\"g\",\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"]", "isSample": false },
      { "input": "[\"L\",\"o\",\"n\",\"g\",\"e\",\"r\",\"S\",\"t\",\"r\",\"i\",\"n\",\"g\",\"F\",\"o\",\"r\",\"T\",\"e\",\"s\",\"t\",\"i\",\"n\",\"g\"]", "expectedOutput": "[\"g\",\"n\",\"i\",\"t\",\"s\",\"e\",\"T\",\"r\",\"o\",\"F\",\"g\",\"n\",\"i\",\"r\",\"t\",\"S\",\"r\",\"e\",\"g\",\"n\",\"o\",\"L\"]", "isSample": false}
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 65536 
  },
  {
    "title": "Palindrome Check",
    "description": "<p>Given a string <code>s</code>, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases...</p>",
    "difficulty": "Easy",
    "defaultLanguage": "javascript",
    "starterCode": {
      "javascript": "function isPalindrome(s) {\n    // Your logic here\n    console.error(\"Implement Palindrome Check in JavaScript\");\n    return false;\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\nrl.once('line', (line) => {\n    try {\n        const result = isPalindrome(line);\n        console.log(result.toString());\n    } catch (e) { console.log(\"false\"); }\n    rl.close();\n});",
      "cpp": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nbool isPalindrome(std::string s) {\n    // Your logic here\n    // std::cerr << \"Implement Palindrome Check in C++\" << std::endl;\n    return false;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);\n    std::string s;\n    std::getline(std::cin, s);\n    std::cout << (isPalindrome(s) ? \"true\" : \"false\") << std::endl;\n    return 0;\n}",
      "java": "import java.util.Scanner;\n\npublic class Main {\n    public boolean isPalindrome(String s) {\n        // Your logic here\n        // System.err.println(\"Implement Palindrome Check in Java\");\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = \"\";\n        if (sc.hasNextLine()) { s = sc.nextLine(); }\n        sc.close();\n        boolean result = new Main().isPalindrome(s);\n        System.out.println(result);\n    }\n}",
      "python": "import sys\n\ndef is_palindrome(s: str) -> bool:\n    # Your logic here\n    # print(\"Implement Palindrome Check in Python\", file=sys.stderr)\n    return False\n\nif __name__ == '__main__':\n    try:\n        s = sys.stdin.readline().strip()\n        result = is_palindrome(s)\n        print(str(result).lower())\n    except:\n        print(\"false\")\n"
    },
    "tags": ["String", "Two Pointers", "Palindrome"],
    "testCases": [
      { "input": "A man, a plan, a canal: Panama", "expectedOutput": "true", "isSample": true },
      { "input": "race a car", "expectedOutput": "false", "isSample": true },
      { "input": " ", "expectedOutput": "true", "isSample": false },
      { "input": "Was it a car or a cat I saw?", "expectedOutput": "true", "isSample": false },
      { "input": "0P", "expectedOutput": "false", "isSample": false },
      { "input": "madamimadam", "expectedOutput": "true", "isSample": false },
      { "input": "Step on no pets!!", "expectedOutput": "true", "isSample": false },
      { "input": "Rotor", "expectedOutput": "true", "isSample": false },
      { "input": "A Toyota! Race fast, safe car! A Toyota!", "expectedOutput": "true", "isSample": false},
      { "input": "This is definitely not a palindrome string.", "expectedOutput": "false", "isSample": false }
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 131072 
  },
  {
    "title": "Longest Substring Without Repeating Characters",
    "description": "<p>Given a string <code>s</code>, find the length of the longest substring without repeating characters...</p>",
    "difficulty": "Medium",
    "defaultLanguage": "javascript",
    "starterCode": {
      "javascript": "function lengthOfLongestSubstring(s) {\n    // Your logic here\n    console.error(\"Implement Longest Substring in JavaScript\");\n    return 0;\n}\n\nconst readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false });\nrl.once('line', (line) => {\n    try {\n        const result = lengthOfLongestSubstring(line);\n        console.log(result);\n    } catch (e) { console.log(0); }\n    rl.close();\n});",
      "cpp": "#include <iostream>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nint lengthOfLongestSubstring(std::string s) {\n    // Your logic here\n    // std::cerr << \"Implement Longest Substring in C++\" << std::endl;\n    return 0;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false); std::cin.tie(NULL);\n    std::string s;\n    std::getline(std::cin, s);\n    std::cout << lengthOfLongestSubstring(s) << std::endl;\n    return 0;\n}",
      "java": "import java.util.Scanner;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public int lengthOfLongestSubstring(String s) {\n        // Your logic here\n        // System.err.println(\"Implement Longest Substring in Java\");\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = \"\";\n        if (sc.hasNextLine()) { s = sc.nextLine(); }\n        sc.close();\n        int result = new Main().lengthOfLongestSubstring(s);\n        System.out.println(result);\n    }\n}",
      "python": "import sys\n\ndef length_of_longest_substring(s: str) -> int:\n    # Your logic here\n    # print(\"Implement Longest Substring in Python\", file=sys.stderr)\n    return 0\n\nif __name__ == '__main__':\n    try:\n        s = sys.stdin.readline().strip()\n        result = length_of_longest_substring(s)\n        print(result)\n    except:\n        print(0)\n"
    },
    "tags": ["String", "Sliding Window", "Hash Table", "Set"],
    "testCases": [
      { "input": "abcabcbb", "expectedOutput": "3", "isSample": true },
      { "input": "bbbbb", "expectedOutput": "1", "isSample": true },
      { "input": "pwwkew", "expectedOutput": "3", "isSample": false },
      { "input": "", "expectedOutput": "0", "isSample": false },
      { "input": "abcdefghijklmnopqrstuvwxyz", "expectedOutput": "26", "isSample": false },
      { "input": "abacaba", "expectedOutput": "3", "isSample": false },
      { "input": "zzzzabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789zzzz", "expectedOutput": "62", "isSample": false },
      { "input": "tmmzuxt", "expectedOutput": "5", "isSample": false },
      { "input": "au", "expectedOutput": "2", "isSample": false},
      { "input": "a", "expectedOutput": "1", "isSample": false},
      { "input": "abcdefgfedcba", "expectedOutput": "7", "isSample": false}
    ],
    "cpuTimeLimit": 1,
    "memoryLimit": 131072 
  }
]