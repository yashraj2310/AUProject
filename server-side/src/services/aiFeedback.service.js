import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from 'dotenv';
import path from 'path';
dotenv.config(); 

if (!process.env.GOOGLE_API_KEY) {
    console.warn("❌ Google API Key is not set. AI Feedback service (Gemini) will not work.");
}

const genAI = process.env.GOOGLE_API_KEY ? new GoogleGenerativeAI(process.env.GOOGLE_API_KEY) : null;
const model = genAI ? genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }) : null; 

export const getAIHelpFeedback = async (userCode, problemContext, recentSubmissions = []) => {
    if (!model) {
        return "AI service is currently unavailable (Google API key missing or model init failed).";
    }

    let promptContent = `
        You are an expert programming assistant reviewing a student's code...
        Problem Title: "${problemContext.title}"
        Problem Description (summary): "${problemContext.description.substring(0, 200)}..."
        Student's current code in ${problemContext.language || 'the language'}:
        \`\`\`
        ${userCode}
        \`\`\`
    `;
    promptContent += `
        Please provide concise, constructive feedback and hints... 
        Keep the feedback encouraging and under 150 words. Do not provide the full correct code.
    `;

    try {
        console.log("AI SERVICE: Sending prompt to Gemini...");
        const result = await model.generateContent(promptContent);
        const response = result.response;
        const feedback = response.text()?.trim() || "No specific feedback generated by Gemini.";
        console.log("AI SERVICE: Received feedback from Gemini.");
        return feedback;
    } catch (error) {
        console.error("Error calling Gemini API:", error);
        return "Sorry, I couldn't generate feedback at this moment. There might be an issue with the AI service (Gemini).";
    }
};